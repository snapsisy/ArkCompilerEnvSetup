#!/bin/bash
function arch_add() {
### add the i386 arch software sources to meet the requirments
    dpkg --add-architecture i386
    apt-get update
}

function dependency_satify() {
## use step_count to ensure all the steps are executed
## if not, exit the excution and return the error code 1

### initialize step_count
    step_count=1
### install dependencies
    apt-get -y install openjdk-8-jdk git-core gnupg flex bison gperf build-essential zip curl zlib1g-dev libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev ccache libgl1-mesa-dev libxml2-utils xsltproc unzip lib32z1-dev qemu g++-multilib gcc-multilib python3-paramiko python-paramiko python-jenkins python-requests python-xlwt libglib2.0-dev libpixman-1-dev linux-libc-dev:i386
    step_count=2
### install mix-compiling toolchain, but don't know why
### there even is a confliction in the packages dependence
    apt-get -y install gcc-5-aarch64-linux-gnu g++-5-aarch64-linux-gnu
    step_count=3
### install self-defined download tools
    apt-get -y install curl axel
    step_count=4
### check step_count
    if [ $step_count -ne 4 ]; then
        echo "dependency installation failed, maybe you need to check your network connection"
        exit 1
    fi
}

function oac_prepare() {
## Use git to clone the whole project
    if [ `pwd` != '/' ]; then
        cd /
    fi
    if [ -d /OpenArkCompiler ]; then
	mv OpenArkCompiler OpenArkCompiler.bak
    fi
    cd /    
    git clone https://code.opensource.huaweicloud.com/HarmonyOS/OpenArkCompiler.git
}

function oacRoot_export() {
    ## Test if the directory exists and set env
    if [ -d /OpenArkCompiler ]; then
        export OacRoot=/OpenArkCompiler
    else
        exit 1
    fi
}

function dir_create() {
    oacRoot_export
    mkdir $OacRoot/tools/ninja_1.9.0
    mkdir $OacRoot/tools/gn
    if [ -d $OacRoot/tools/ninja_1.9.0 ] && [ -d $OacRoot/tools/gn ]; then
        return 0
    else 
        exit 1
    fi
}

function tool_prepare() {
    oacRoot_export
## download ninja to tools directory
    cd $OacRoot/tools/ninja_1.9.0/ && curl -LO https://github.com/ninja-build/ninja/releases/download/v1.9.0/ninja-linux.zip && unzip ninja-linux.zip && chmod +x ninja && rm ninja-linux.zip
    echo 'ninja copied' && cd /
## download gn to tools directory
    cd $OacRoot/tools/gn/ && curl -L 'https://archive.softwareheritage.org/browse/content/sha1_git:2dc0d5b26caef44f467de8120b26f8aad8b878be/raw/?filename=gn' -o gn && chmod +x gn
    echo 'gn copied' && cd /
## download llvm-clang
    cd $OacRoot/tools && axel -n 20 'http://releases.llvm.org/8.0.0/clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz' && tar -xvf clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz && mv clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-16.04 clang_llvm-8.0.0-x86_64-linux-gnu-ubuntu-16.04 && cd /
}

function env_ready() { 
    cd /OpenArkCompiler
    source ./build/envsetup.sh
    make -j8
}


arch_add
dependency_satify
oac_prepare
dir_create
tool_prepare
env_ready
